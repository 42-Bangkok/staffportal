/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/account/auths/login/": {
    /**
     * Post Login
     * @description Login through API. It creates a session, and a user if not exist.
     */
    post: operations["appaccount_routes_auths_post_login"];
  };
  "/api/account/auths/logout/": {
    /**
     * Post Logout
     * @description Logout given access_token, session is destroyed.
     */
    post: operations["appaccount_routes_auths_post_logout"];
  };
  "/api/account/auths/refresh/": {
    /**
     * Post Refresh
     * @description Refresh access_token using refresh_token.
     */
    post: operations["appaccount_routes_auths_post_refresh"];
  };
  "/api/account/users/me/": {
    /**
     * Get Me
     * @description Get current user profile
     */
    get: operations["appaccount_routes_users_get_me"];
    /**
     * Delete Me
     * @description Delete current user profile
     */
    delete: operations["appaccount_routes_users_delete_me"];
    /**
     * Patch Me
     * @description Patch current user profile
     */
    patch: operations["appaccount_routes_users_patch_me"];
  };
  "/api/data/cadetmeta/{login}/": {
    /**
     * Get Cadetmeta
     * @description Get the cadetmeta of a user for the given login
     * If meta does not exist it creates one regardless of it being on intra or not.
     */
    get: operations["appdata_routes_cadetmeta_get_cadetmeta"];
    /**
     * Patch Cadetmeta
     * @description Patch the cadetmeta of a user for the given login
     * If meta does not exist it creates one regardless of it being on intra or not.
     */
    patch: operations["appdata_routes_cadetmeta_patch_cadetmeta"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** LoginPostOut */
    LoginPostOut: {
      /** Access Token */
      access_token: string;
      /** Expires In */
      expires_in: number;
      /** Refresh Token */
      refresh_token: string;
      /** Refresh Token Expires In */
      refresh_token_expires_in: number;
    };
    /** LoginPostIn */
    LoginPostIn: {
      /** Uid */
      uid: string;
      /**
       * Provider
       * @constant
       */
      provider: "42";
      /**
       * Email
       * @description Email of the user
       */
      email?: string | null;
    };
    /** RefreshPostOut */
    RefreshPostOut: {
      /** Access Token */
      access_token: string;
      /** Expires In */
      expires_in: number;
      /** Refresh Token */
      refresh_token: string;
    };
    /** RefreshPostIn */
    RefreshPostIn: {
      /** Refresh Token */
      refresh_token: string;
    };
    /** MeGetOut */
    MeGetOut: {
      /**
       * Created
       * Format: date-time
       */
      created: string;
      /**
       * Updated
       * Format: date-time
       */
      updated: string;
      /**
       * First Name
       * @default
       */
      first_name?: string;
      /**
       * Last Name
       * @default
       */
      last_name?: string;
      /**
       * Gender
       * @default u
       */
      gender?: string;
      /** Dob */
      dob?: string | null;
      /** Time Of Birth */
      time_of_birth?: string | null;
      /**
       * Medical Condition
       * @default
       */
      medical_condition?: string;
      /**
       * Job Title
       * @default
       */
      job_title?: string;
      /** Username */
      username: string;
    };
    /** MePatchOut */
    MePatchOut: {
      /**
       * Created
       * Format: date-time
       */
      created: string;
      /**
       * Updated
       * Format: date-time
       */
      updated: string;
      /**
       * First Name
       * @default
       */
      first_name?: string;
      /**
       * Last Name
       * @default
       */
      last_name?: string;
      /**
       * Gender
       * @default u
       */
      gender?: string;
      /** Dob */
      dob?: string | null;
      /** Time Of Birth */
      time_of_birth?: string | null;
      /**
       * Medical Condition
       * @default
       */
      medical_condition?: string;
      /**
       * Job Title
       * @default
       */
      job_title?: string;
      /** Username */
      username: string;
    };
    /** MePatchIn */
    MePatchIn: {
      /** Username */
      username?: string;
      /**
       * First Name
       * @default
       */
      first_name?: string;
      /**
       * Last Name
       * @default
       */
      last_name?: string;
      /**
       * Gender
       * @default u
       */
      gender?: string;
      /** Dob */
      dob?: string | null;
      /** Time Of Birth */
      time_of_birth?: string | null;
      /**
       * Medical Condition
       * @default
       */
      medical_condition?: string;
      /**
       * Job Title
       * @default
       */
      job_title?: string;
    };
    /** CadetmetaGetOut */
    CadetmetaGetOut: {
      /**
       * Id
       * Format: uuid
       */
      id?: string;
      /**
       * Created
       * Format: date-time
       */
      created: string;
      /**
       * Updated
       * Format: date-time
       */
      updated: string;
      /** Login */
      login: string;
      /**
       * Note
       * @default
       */
      note?: string;
    };
    /** CadetmetaPatchOut */
    CadetmetaPatchOut: {
      /**
       * Id
       * Format: uuid
       */
      id?: string;
      /**
       * Created
       * Format: date-time
       */
      created: string;
      /**
       * Updated
       * Format: date-time
       */
      updated: string;
      /** Login */
      login: string;
      /**
       * Note
       * @default
       */
      note?: string;
    };
    /** CadetmetaPatchIn */
    CadetmetaPatchIn: {
      /**
       * Note
       * @default
       */
      note?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Post Login
   * @description Login through API. It creates a session, and a user if not exist.
   */
  appaccount_routes_auths_post_login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginPostIn"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["LoginPostOut"];
        };
      };
    };
  };
  /**
   * Post Logout
   * @description Logout given access_token, session is destroyed.
   */
  appaccount_routes_auths_post_logout: {
    responses: {
      /** @description No Content */
      204: {
        content: never;
      };
    };
  };
  /**
   * Post Refresh
   * @description Refresh access_token using refresh_token.
   */
  appaccount_routes_auths_post_refresh: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RefreshPostIn"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RefreshPostOut"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get Me
   * @description Get current user profile
   */
  appaccount_routes_users_get_me: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["MeGetOut"];
        };
      };
    };
  };
  /**
   * Delete Me
   * @description Delete current user profile
   */
  appaccount_routes_users_delete_me: {
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
    };
  };
  /**
   * Patch Me
   * @description Patch current user profile
   */
  appaccount_routes_users_patch_me: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["MePatchIn"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["MePatchOut"];
        };
      };
    };
  };
  /**
   * Get Cadetmeta
   * @description Get the cadetmeta of a user for the given login
   * If meta does not exist it creates one regardless of it being on intra or not.
   */
  appdata_routes_cadetmeta_get_cadetmeta: {
    parameters: {
      path: {
        login: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CadetmetaGetOut"];
        };
      };
    };
  };
  /**
   * Patch Cadetmeta
   * @description Patch the cadetmeta of a user for the given login
   * If meta does not exist it creates one regardless of it being on intra or not.
   */
  appdata_routes_cadetmeta_patch_cadetmeta: {
    parameters: {
      path: {
        login: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CadetmetaPatchIn"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CadetmetaPatchOut"];
        };
      };
    };
  };
}
